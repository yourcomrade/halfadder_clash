/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.1. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module testBench
    ( // No inputs

      // Outputs
      output wire  result
    );
  wire [2:0] z;
  wire [1:0] result_1;
  wire [1:0] c$ds_app_arg;
  wire  result_2;
  reg [1:0] s = 2'd0;
  reg  \f'  = 1'b0;
  wire  f1;
  wire [1:0] \Half_adder.testBench2 ;
  wire  \Half_adder.testBench3 ;
  wire  \Half_adder.testBench12 ;
  wire [1:0] c$ds_app_arg_0;
  wire  c$ds_app_arg_1;
  reg [1:0] s_0 = 2'd0;
  wire  \Half_adder.testBench_clk ;
  wire  \Half_adder.testBench10 ;
  wire  \c$Half_adder.testBench_app_arg ;
  wire [7:0] c$vecFlat;
  wire [3:0] c$vecFlat_0;

  assign z = s + 2'd1;

  assign result_1 = (z > 3'd3) ? 2'd3 : (z[0+:2]);

  assign c$vecFlat = {{1'b0,   1'b0},   {1'b1,
                                         1'b0},   {1'b1,   1'b0},   {1'b0,   1'b1}};

  // index begin
  wire [1:0] vecArray [0:4-1];
  genvar i;
  generate
  for (i=0; i < 4; i=i+1) begin : mk_array
    assign vecArray[(4-1)-i] = c$vecFlat[i*2+:2];
  end
  endgenerate
  assign c$ds_app_arg = vecArray[($unsigned({{(64-2) {1'b0}},s}))];
  // index end

  assign result_2 = \f'  ? \f'  : f1;

  // register begin
  always @(posedge \Half_adder.testBench_clk  or  posedge  \c$Half_adder.testBench_app_arg ) begin : s_register
    if ( \c$Half_adder.testBench_app_arg ) begin
      s <= 2'd0;
    end else begin
      s <= result_1;
    end
  end
  // register end

  // register begin
  always @(posedge \Half_adder.testBench_clk  or  posedge  \c$Half_adder.testBench_app_arg ) begin : f_register
    if ( \c$Half_adder.testBench_app_arg ) begin
      \f'  <= 1'b0;
    end else begin
      \f'  <= (s == 2'd3);
    end
  end
  // register end

  // assert begin
  // pragma translate_off
  always @(posedge \Half_adder.testBench_clk ) begin
    if ((\Half_adder.testBench2 ) !== c$ds_app_arg) begin
      $display("@%0tns: %s, expected: %b, actual: %b", $time, ("outputVerifier"), c$ds_app_arg, (\Half_adder.testBench2 ));
      $finish;
    end
  end
  // pragma translate_on
  assign f1 = \f' ;
  // assert end

  assign \Half_adder.testBench2  = {\Half_adder.testBench12 ,
                                    \Half_adder.testBench3 };

  assign \Half_adder.testBench3  = c$ds_app_arg_1 & c$ds_app_arg_1;

  assign \Half_adder.testBench12  = c$ds_app_arg_1 ^ c$ds_app_arg_1;

  assign c$ds_app_arg_0 = (s_0 < 2'd3) ? (s_0 + 2'd1) : s_0;

  assign c$vecFlat_0 = {1'b0,   1'b0,   1'b1,
                        1'b1};

  // index begin
  wire  vecArray_0 [0:4-1];
  genvar i_0;
  generate
  for (i_0=0; i_0 < 4; i_0=i_0+1) begin : mk_array_0
    assign vecArray_0[(4-1)-i_0] = c$vecFlat_0[i_0*1+:1];
  end
  endgenerate
  assign c$ds_app_arg_1 = vecArray_0[($unsigned({{(64-2) {1'b0}},s_0}))];
  // index end

  // register begin
  always @(posedge \Half_adder.testBench_clk  or  posedge  \c$Half_adder.testBench_app_arg ) begin : s_0_register
    if ( \c$Half_adder.testBench_app_arg ) begin
      s_0 <= 2'd0;
    end else begin
      s_0 <= c$ds_app_arg_0;
    end
  end
  // register end

  // tbClockGen begin
  // pragma translate_off
  reg  clk;
  // 1 = 0.1ps
  localparam half_period = (100000 / 2);
  always begin
    // Delay of 1 mitigates race conditions (https://github.com/steveicarus/iverilog/issues/160)
    #1 clk =  0 ;
    `ifndef VERILATOR
    #1000000 forever begin

      if (~ \Half_adder.testBench10 ) begin
        $finish(0);
      end

      clk = ~ clk;
      #half_period;
      clk = ~ clk;
      #half_period;
    end
    `else
    clk = $c("this->tb_clock_gen(",half_period,",true,",(~ \Half_adder.testBench10 ),")");
    `endif
  end

  `ifdef VERILATOR
    `systemc_interface
    CData tb_clock_gen(vluint32_t half_period, bool active_rising, bool result_rec) {
      static vluint32_t init_wait = 1000000;
      static vluint32_t to_wait = 0;
      static CData clock = active_rising ? 0 : 1;

      if(init_wait == 0) {
        if(result_rec) {
          std::exit(0);
        }
        else {
          if(to_wait == 0) {
            to_wait = half_period - 1;
            clock = clock == 0 ? 1 : 0;
          }
          else {
            to_wait = to_wait - 1;
          }
        }
      }
      else {
        init_wait = init_wait - 1;
      }

      return clock;
    }
    `verilog
  `endif

  assign \Half_adder.testBench_clk  = clk;
  // pragma translate_on
  // tbClockGen end

  assign \Half_adder.testBench10  = ~ result_2;

  // resetGen begin
  // pragma translate_off
  reg  rst;
  localparam reset_period = 1000000 - 10 + (1 * 100000);
  `ifndef VERILATOR
  initial begin
    #1 rst =  1 ;
    #reset_period rst =  0 ;
  end
  `else
  always begin
    // The redundant (rst | ~ rst) is needed to ensure that this is
    // calculated in every cycle by verilator. Without it, the reset will stop
    // being updated and will be stuck as asserted forever.
    rst = $c("this->reset_gen(",reset_period,",true)") & (rst | ~ rst);
  end
  `systemc_interface
  CData reset_gen(vluint32_t reset_period, bool active_high) {
    static vluint32_t to_wait = reset_period;
    static CData reset = active_high ? 1 : 0;
    static bool finished = false;

    if(!finished) {
      if(to_wait == 0) {
        reset = reset == 0 ? 1 : 0;
        finished = true;
      }
      else {
        to_wait = to_wait - 1;
      }
    }

    return reset;
  }
  `verilog
  `endif
  assign \c$Half_adder.testBench_app_arg  = rst;
  // pragma translate_on
  // resetGen end

  assign result = result_2;


endmodule

